import java.lang.reflect.Array;
import java.util.Collection;
import java.util.PriorityQueue;

public class KthVulnerability {
    public static void main(String[] args) {
        int[] arr = { 1, 3, 2, 1 };
        System.out.println(findKthMinimumVulnerability(2, 3, arr));
        // int[] arr = { 4, 2, 3, 1, 1 };
        // System.out.println(findKthMinimumVulnerability(3, 4, arr));
    }

    public static int[] findKthMinimumVulnerability(int k, int m, int[] vuls) {
        int len = vuls.length;
        int[] ans = new int[len - m + 1];
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a,b)->Integer.compare(b, a));

        for (int i = 0; i < len; i++) {
            maxHeap.offer(vuls[i]);
            if (i>=m)
                maxHeap.remove(vuls[i-m]);
            if (maxHeap.size()>k) 
                maxHeap.poll();
            if (i-m+1>=0)
                ans[i-m+1] = maxHeap.peek();
        }
        return ans;
    }

    public static int[] findKthMinimumVulnerability2(int k, int m, int[] vuls) {
        int n = vuls.length;
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a, b) -> Integer.compare(b, a));
        int[] res = new int[n - m + 1];

        for (int i = 0; i < n; i++) {
            maxHeap.add(vuls[i]);
            if (i >= m) {
                int x = vuls[i - m];
                System.out.println(x);
                maxHeap.remove(vuls[i - m]);
            }
            if (maxHeap.size() > k) {
                maxHeap.poll();
            }
            if (i >= m - 1) {
                int x = i - m + 1;
                res[x] = maxHeap.peek();
                System.out.println("res[x]: " + res[x]);
            }
        }
        return res;
    }

    public static int[] findKthMinimumVulnerability1(int k, int m, int[] vulnerability) {
        int len = vulnerability.length;
        int[] result = new int[len - m + 1];
        PriorityQueue<Integer> heap = new PriorityQueue<>();
        int l = 0;
        int x = 0;
        int heapSize = m - k + 1;
        for (int r = 0; r < len; r++) {
            int curr = vulnerability[r];
            if (r - l + 1 < m) {
                heap.offer(curr);
                while (heap.size() > heapSize) {
                    heap.poll();
                }
            } else {
                heap.offer(curr);
                while (heap.size() > heapSize) {
                    heap.poll();
                }
                result[x] = heap.peek();
                x++;
                l++;
            }
        }
        return result;
    }

}
